README

CSC458 Assignment 1

Overview of structure of code and design decisions:
In sr_handlepacket, we recieve a packet to handle. Within this function, we parse the packet to see how to handle it, sanity-test the packet, and then pass off work to other functions to handle the packet as appropriate. ARP-related functions have been added to sr_arpcache.c, longest prefix matching has been added to sr_rt.c, and all other functions that we added can be found in sr_utils.c. 

ARP cache-related code is fairly straightforward; the work we do in sr_arpcache.c maps one-to-one with the pseudocode given in sr_arpcache.h and the instructions from the assignment. Note that there was one design decision we made here: we are instructed to send out ARP requests once every second (send request if difftime(current time, last sent time of ARP request) is > 1.0), but this 1.0 comparison somehow caused a delay issue; ARP requests would send out every 2 seconds instead. To alleviate this, we used 0.9 instead of 1.0, and ARP requests now are sent every second. Because there is work to be done (which takes time) between this comparison and the packet actually being sent out, the timing ends up being correct; we have not seen any <1 second differences between ARP requests.

Another design decision made is when creating ICMP messages (in sr_utils.c at handle_ICMP and populate_icmp_header). There was the choice to use INIT_TTL (255) as the initial TTL, or 100, which is what sr_solution uses. We chose INIT_TTL, just for the convenience (it was a constant already defined in the starter code). Note that there is one more design decision that can be observed in sr_utils.c: the lookup_and_send function. At the end of the handle_ICMP and forward_ip_packet functions, lookup_and_send is called. Though ICMP handling and IP packet forwarding involve different work, we used one function to handle sending because in both cases, we need to go through the ARP process (check cache and send ARP request in case of a cache miss) before sending out the packet. All fowarding/ICMP-specific work was left to their respective functions, so that lookup_and_send can be used in future assignments whenever we need to check our ARP cache for an IP->MAC mapping, possibly send out ARP requests, then send a packet.

One more minor design decision of note is in the LPM function in sr_rt.c, used for longest prefix matching. When we have found a prefix match of equal length to the current longest match, we prefer the current longest match; we did not see any advantage to accepting a new match in the case of a tie.